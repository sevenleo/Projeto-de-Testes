Colisoes
=========================

Verificar colisao entre 2 retângulos

Entrada: x0, x1, y0, y1 de cada retângulo ( 8 inteiros )

Saída:  1, se houver colisão 
	      0, caso contrário



Caracteristicas
======================
	valores validos:
		xi1 > xi0
		yi1 > yi0 
		// 0 <= xi,yi <= 10^6

	funcionalidade:
		colidem/tangentes			
		colidem/retangulos iguais	
		colidem/parcial				
		não colidem					
	
	
Blocos	
======================
colidem/tangentes			[T/F]
colidem/retangulos iguais	[T/F]
colidem parcial				[T/F]
não colidem					[T/F]

ou

[nao colidem / tangentes / iguais / parcial]


Criterio de Combinacao
======================
Each Choice


Requisitos
======================
TR = {nao colidem, tangentes, iguais, parcial }


Testes
======================

0 0 2 2 
3 3 4 4 
saida 0 (nao colidem)


0 0 1 1
0 0 2 2
saida 1


@Test
	public void naoColidemTest() {
		boolean colisao = Colisao.checaColisao(0, 0, 1, 1, 2, 2, 3, 3);
		assertFalse(colisao);
	}
	
	@Test
	public void colidemTangenteTest() {
		boolean colisao = Colisao.checaColisao(0, 0, 2, 2, 2, 1, 4, 3);
		assertTrue(colisao);
	}
	
	@Test
	public void colidemIguaisTest(){
		boolean colisao = Colisao.checaColisao(0, 0, 1, 1, 0, 0, 1, 1);
		assertTrue(colisao);
	}

	@Test
	public void colidemParcialTest(){
		boolean colisao = Colisao.checaColisao(0, 0, 2, 2, 1, 1, 3, 3);
		assertTrue(colisao);
	}
	
	
	
	

Testes
======================

R1x0=R2x0 R1x1=R2x1 R1y0=R2y0 R1y1=R2y1 	(colidem/retangulos iguais)

R1x0 < R2x0 & 	R1x1 > R2x0 & 	R1y1 > R2y0 &	R1Y0 < R2y0	(colisao parcial)

R1x0 = R2x0 & ( R1y0 <= R2y0 & R1y1 >= R2y0 || R1y0 <= R2y1 & R1y1 >= R2y1 ) (colidem/tangentes em x)

